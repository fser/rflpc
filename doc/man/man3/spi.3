.TH "SPI" 3 "Wed Mar 21 2012" "rfLPC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SPI \- 
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBrflpc_spi_t\fP { \fBRFLPC_SPI0\fP, \fBRFLPC_SPI1\fP }"
.br
.RI "\fIUsed to select which SPI port to use\&. \fP"
.ti -1c
.RI "enum \fBrflpc_spi_mode_t\fP { \fBRFLPC_SPI_MASTER\fP, \fBRFLPC_SPI_SLAVE\fP }"
.br
.RI "\fIUsed to select the SPI operating mode\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBrflpc_spi_init\fP (\fBrflpc_spi_t\fP port, \fBrflpc_spi_mode_t\fP mode, \fBrflpc_clock_divider_t\fP cpu_clock_divider, uint8_t data_size_transfert, uint8_t clock_prescale, uint8_t serial_clock_rate)"
.br
.RI "\fIInits the SPI interface in master mode\&. \fP"
.ti -1c
.RI "static LPC_SSP_TypeDef * \fBrflpc_spi_get_base_addr\fP (\fBrflpc_spi_t\fP port)"
.br
.RI "\fIReturns the base address of the SPI control block depending of the desired port\&. \fP"
.ti -1c
.RI "static int \fBrflpc_spi_tx_fifo_empty\fP (\fBrflpc_spi_t\fP port)"
.br
.RI "\fITests if transmition FIFO is empty\&. \fP"
.ti -1c
.RI "static int \fBrflpc_spi_tx_fifo_full\fP (\fBrflpc_spi_t\fP port)"
.br
.RI "\fITests if the transmition FIFO is full\&. \fP"
.ti -1c
.RI "static int \fBrflpc_spi_rx_fifo_empty\fP (\fBrflpc_spi_t\fP port)"
.br
.RI "\fITests if the reception FIFO is empty\&. \fP"
.ti -1c
.RI "static void \fBrflpc_spi_write\fP (\fBrflpc_spi_t\fP port, uint16_t data)"
.br
.RI "\fISends data through the spi interface\&. \fP"
.ti -1c
.RI "static uint16_t \fBrflpc_spi_read\fP (\fBrflpc_spi_t\fP port)"
.br
.RI "\fIReceive data through the spi interface\&. \fP"
.ti -1c
.RI "void \fBrflpc_spi_set_rx_callback\fP (\fBrflpc_spi_t\fP port, \fBrflpc_irq_handler_t\fP callback)"
.br
.RI "\fISets the interrupt handler for SPI reception\&. \fP"
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBrflpc_spi_mode_t\fP"

.PP
Used to select the SPI operating mode\&. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIRFLPC_SPI_MASTER \fP\fP
Use the SPI as master\&. 
.TP
\fB\fIRFLPC_SPI_SLAVE \fP\fP
Use the SPI as slave\&. 
.PP
Definition at line 45 of file spi\&.h\&.
.SS "enum \fBrflpc_spi_t\fP"

.PP
Used to select which SPI port to use\&. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIRFLPC_SPI0 \fP\fP
Use the SPI port 0\&. 
.TP
\fB\fIRFLPC_SPI1 \fP\fP
Use the SPI port 1\&. 
.PP
Definition at line 38 of file spi\&.h\&.
.SH "Function Documentation"
.PP 
.SS "static LPC_SSP_TypeDef* \fBrflpc_spi_get_base_addr\fP (\fBrflpc_spi_t\fPport)\fC [inline, static]\fP"

.PP
Returns the base address of the SPI control block depending of the desired port\&. \fBParameters:\fP
.RS 4
\fIport\fP the port to get 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to a LPC_SSP_TypeDef structure that can be used to configure the desired SPI\&. 
.RE
.PP
\fBNote:\fP
.RS 4
Used by the library internals\&. You should not need to use this function\&. 
.RE
.PP

.PP
Definition at line 73 of file spi\&.h\&.
.PP
References RFLPC_SPI0\&.
.PP
Referenced by rflpc_spi_read(), rflpc_spi_rx_fifo_empty(), rflpc_spi_tx_fifo_empty(), rflpc_spi_tx_fifo_full(), and rflpc_spi_write()\&.
.SS "void \fBrflpc_spi_init\fP (\fBrflpc_spi_t\fPport, \fBrflpc_spi_mode_t\fPmode, \fBrflpc_clock_divider_t\fPcpu_clock_divider, uint8_tdata_size_transfert, uint8_tclock_prescale, uint8_tserial_clock_rate)"

.PP
Inits the SPI interface in master mode\&. \fBParameters:\fP
.RS 4
\fIport\fP The port to configure 
.br
\fImode\fP The mode to use 
.br
\fIcpu_clock_divider\fP The divider applied to CPU clock to get the SPI peripheral clock 
.br
\fIdata_size_transfert\fP the number of bits that are transfered in each frame (only values between 4 and 16bits are supported) 
.br
\fIclock_prescale\fP Factor by which the prescaler divide the peripheral clock\&. Between 2 and 254\&. Bit 0 is always read as 0 (only even numbers)\&. Used only for master mode 
.br
\fIserial_clock_rate\fP Number of prescaler-outputs ber bit\&. This allows to set the SPI tranfert clock\&. Used only for master mode\&.
.RE
.PP
\fBNote:\fP
.RS 4
The final clock used as SCK is then \[\frac{CPU Clock}{CPUDivider \times ClockPrescale \times SerialClockRate}\] In slave mode, the clock_prescale and serial_clock_rate parameters are not used\&. The clock sent by the master must not exceed 1/12 of the frequency used to clock the SPI peripheral 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBrflpc_clock_get_system_clock()\fP 
.RE
.PP

.SS "static uint16_t \fBrflpc_spi_read\fP (\fBrflpc_spi_t\fPport)\fC [inline, static]\fP"

.PP
Receive data through the spi interface\&. \fBParameters:\fP
.RS 4
\fIport\fP the port to receive from 
.RE
.PP
\fBReturns:\fP
.RS 4
the value read on the spi bus 
.RE
.PP
\fBWarning:\fP
.RS 4
this function waits for a data to be available! 
.RE
.PP

.PP
Definition at line 133 of file spi\&.h\&.
.PP
References rflpc_spi_get_base_addr(), and rflpc_spi_rx_fifo_empty()\&.
.SS "static int \fBrflpc_spi_rx_fifo_empty\fP (\fBrflpc_spi_t\fPport)\fC [inline, static]\fP"

.PP
Tests if the reception FIFO is empty\&. \fBParameters:\fP
.RS 4
\fIport\fP The SPI port to test 
.RE
.PP
\fBReturns:\fP
.RS 4
true if empty 
.RE
.PP

.PP
Definition at line 108 of file spi\&.h\&.
.PP
References rflpc_spi_get_base_addr()\&.
.PP
Referenced by rflpc_spi_read()\&.
.SS "void \fBrflpc_spi_set_rx_callback\fP (\fBrflpc_spi_t\fPport, \fBrflpc_irq_handler_t\fPcallback)"

.PP
Sets the interrupt handler for SPI reception\&. The interrupt will be generated when the RX FIFO is half-full 
.PP
\fBParameters:\fP
.RS 4
\fIport\fP the port to use 
.br
\fIcallback\fP the callback to set 
.RE
.PP

.SS "static int \fBrflpc_spi_tx_fifo_empty\fP (\fBrflpc_spi_t\fPport)\fC [inline, static]\fP"

.PP
Tests if transmition FIFO is empty\&. \fBParameters:\fP
.RS 4
\fIport\fP The SPI port to test 
.RE
.PP
\fBReturns:\fP
.RS 4
true if empty 
.RE
.PP

.PP
Definition at line 84 of file spi\&.h\&.
.PP
References rflpc_spi_get_base_addr()\&.
.SS "static int \fBrflpc_spi_tx_fifo_full\fP (\fBrflpc_spi_t\fPport)\fC [inline, static]\fP"

.PP
Tests if the transmition FIFO is full\&. \fBParameters:\fP
.RS 4
\fIport\fP The SPI port to test 
.RE
.PP
\fBReturns:\fP
.RS 4
true if full 
.RE
.PP

.PP
Definition at line 96 of file spi\&.h\&.
.PP
References rflpc_spi_get_base_addr()\&.
.PP
Referenced by rflpc_spi_write()\&.
.SS "static void \fBrflpc_spi_write\fP (\fBrflpc_spi_t\fPport, uint16_tdata)\fC [inline, static]\fP"

.PP
Sends data through the spi interface\&. \fBParameters:\fP
.RS 4
\fIport\fP The port to send to 
.br
\fIdata\fP The data to send\&. If the port has been configured to send less than 16 bits in each frame, the data must be right justified 
.RE
.PP
\fBNote:\fP
.RS 4
If the port is configured master, the slave select pin will be activated as long as there is data in the FIFO\&. If the port is configured slave, the data will be transmitted only when the slave select is activated by master 
.RE
.PP

.PP
Definition at line 121 of file spi\&.h\&.
.PP
References rflpc_spi_get_base_addr(), and rflpc_spi_tx_fifo_full()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for rfLPC from the source code\&.
