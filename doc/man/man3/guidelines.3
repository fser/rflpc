.TH "guidelines" 3 "Wed Mar 21 2012" "rfLPC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
guidelines \- Developer guidelines 
If you want to contribute to the library, please follow these guidelines to ease the integration
.SH "How to contribute"
.PP
.IP "\(bu" 2
Use your github account to fork the \fChauspie/rflpc\fP repository and push your contribution to your fork\&. Then, send me a pull-request for integration to the \fCdevelop\fP branch
.IP "\(bu" 2
Always do your development based on the \fCdevelop\fP branch, except if you want to submit me a hotfix of a released version\&. In the later case, based your work on the master branch, I will take care of integrating the hotfix in the \fCdevelop\fP branch\&.
.IP "\(bu" 2
Try to do some extensive tests on your code, and, if you can, a bit of code review (which I'll do with you anyway before integrating your patch)
.PP
.SH "Coding conventions"
.PP
.IP "\(bu" 2
All symbol names are in lower case, prefixed by \fCrflpc_\fP and a term describing the category of the symbol/function\&. For example:
.IP "  \(bu" 4
\fCrflpc_eth_xxx\fP for an ethernet driver
.IP "  \(bu" 4
\fCrflpc_spi_xxx\fP for SPI drivers
.IP "  \(bu" 4
\&.\&.\&.
.PP

.IP "\(bu" 2
Type names uses the same prefix guidelines and must finish by a \fC_t\fP 
.IP "\(bu" 2
If possible, prefer static inline functions to macros
.IP "\(bu" 2
All new feature must be able to be enabled/disabled using the config system\&.
.IP "  \(bu" 4
you should put your code in a \fC#ifdef RFLPC_CONFIG_ENABLE_xxx \&.\&.\&. #endif\fP block\&. The chosen name must be explicit
.PP

.IP "\(bu" 2
Notable exception to the prefix rule is for function that implements some libc well known functions (\fBprintf\fP, \fBmemcpy\fP, \fBmemset\fP\&.\&.\&.) 
.PP

