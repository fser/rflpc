.TH "Debug macro" 3 "Wed Mar 21 2012" "rfLPC" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Debug macro \- 
.PP
Useful macro to use for debuggin purpose\&.  

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBRFLPC_DELAY\fP(c)"
.br
.RI "\fIwait until a counter reaches c\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_STOP\fP(l, c)"
.br
.RI "\fIStops execution by an infinite loop, switching between led pattern l and its opposite\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_DUMP_STACK\fP()"
.br
.RI "\fIDumps 64 bytes from the current value of the stack pointer\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_ASSERT\fP(cond)   do { if (!(cond)) { \fBRFLPC_STOP\fP(0, 50000); } } while (0)"
.br
.RI "\fIAsserts a condition\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_PROFILE_PRESCALE\fP   (\fBrflpc_clock_get_system_clock\fP() / 1000000)"
.br
.RI "\fIThis holds the value of the prescale counter that will be used for time measurement\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_PROFILE_INIT\fP(timer)   do {\fBrflpc_timer_enable\fP(timer); \fBrflpc_timer_set_clock\fP(timer, \fBRFLPC_CCLK\fP); \fBrflpc_timer_set_pre_scale_register\fP(timer,\fBRFLPC_PROFILE_PRESCALE\fP); \fBrflpc_timer_start\fP(timer); } while(0)"
.br
.RI "\fIInits a given timer so that it can be used for profiling\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_PROFILE_DECLARE_COUNTER\fP(counter)   volatile uint32_t rflpc_profile_total_##counter; volatile uint32_t rflpc_profile_start_##counter;"
.br
.RI "\fIDeclares the needed global variables for profiling\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_PROFILE_DECLARE_EXTERN_COUNTER\fP(counter)   extern volatile uint32_t rflpc_profile_total_##counter;extern volatile uint32_t rflpc_profile_start_##counter;"
.br
.RI "\fIDeclare the needed global variables for profiling as externs\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_PROFILE_START_COUNTER\fP(counter, timer)   do { rflpc_profile_start_##counter = \fBrflpc_timer_get_counter\fP(timer);} while(0)"
.br
.RI "\fIStarts a given counter, storing the current time of the given timer\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_PROFILE_STOP_COUNTER\fP(counter, timer)   do { rflpc_profile_total_##counter += \fBrflpc_timer_get_counter\fP(timer) - rflpc_profile_start_##counter;} while(0)"
.br
.RI "\fIStops a given counter, adding the elapsed time since its start to the global counter\&. \fP"
.ti -1c
.RI "#define \fBRFLPC_PROFILE_GET_TOTAL\fP(counter)   rflpc_profile_total_##counter"
.br
.RI "\fIGets the global counter value\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Useful macro to use for debuggin purpose\&. 
.SH "Define Documentation"
.PP 
.SS "#define \fBRFLPC_ASSERT\fP(cond)   do { if (!(cond)) { \fBRFLPC_STOP\fP(0, 50000); } } while (0)"

.PP
Asserts a condition\&. \fBParameters:\fP
.RS 4
\fIcond\fP If false, stop the device and blink all leds 
.RE
.PP

.PP
Definition at line 79 of file debug\&.h\&.
.SS "#define \fBRFLPC_DELAY\fP(c)"
\fBValue:\fP
.PP
.nf
do {     \
   int i;uint32_t j;            \
   for (i=0 ; i < (c) ; ++i)    \
      j = LPC_SC->SCS;          \
   } while (0)
.fi
.PP
wait until a counter reaches c\&. Used to wait some time\&. 
.PP
\fBNote:\fP
.RS 4
Depends on CPU frequency 
.RE
.PP

.PP
Definition at line 44 of file debug\&.h\&.
.SS "#define \fBRFLPC_DUMP_STACK\fP()"
\fBValue:\fP
.PP
.nf
do {                                 \
    register uint8_t *mstack =(uint8_t*) __get_MSP();       \
    register int i;                                         \
    for (i = 0 ; i < 128 ; ++i)                              \
    {                                                       \
        if (i % 16 == 0)                                    \
        printf('\n\r%p: ', mstack  + i);                \
        printf('%02x ', mstack[i]);                         \
    }                                                       \
    printf('\n\r');                                         \
    } while(0)
.fi
.PP
Dumps 64 bytes from the current value of the stack pointer\&. \fBNote:\fP
.RS 4
this maccro uses \fBprintf()\fP 
.RE
.PP

.PP
Definition at line 64 of file debug\&.h\&.
.SS "#define \fBRFLPC_PROFILE_DECLARE_COUNTER\fP(counter)   volatile uint32_t rflpc_profile_total_##counter; volatile uint32_t rflpc_profile_start_##counter;"

.PP
Declares the needed global variables for profiling\&. This has to be used only once for each counter in your program and will define global variable to handle the counter 
.PP
Definition at line 52 of file profiling\&.h\&.
.SS "#define \fBRFLPC_PROFILE_DECLARE_EXTERN_COUNTER\fP(counter)   extern volatile uint32_t rflpc_profile_total_##counter;extern volatile uint32_t rflpc_profile_start_##counter;"

.PP
Declare the needed global variables for profiling as externs\&. This can be used when using a counter in more than one C file\&. 
.PP
Definition at line 57 of file profiling\&.h\&.
.SS "#define \fBRFLPC_PROFILE_GET_TOTAL\fP(counter)   rflpc_profile_total_##counter"

.PP
Gets the global counter value\&. It counts how much time have been spent between START and STOP calls 
.PP
Definition at line 66 of file profiling\&.h\&.
.SS "#define \fBRFLPC_PROFILE_INIT\fP(timer)   do {\fBrflpc_timer_enable\fP(timer); \fBrflpc_timer_set_clock\fP(timer, \fBRFLPC_CCLK\fP); \fBrflpc_timer_set_pre_scale_register\fP(timer,\fBRFLPC_PROFILE_PRESCALE\fP); \fBrflpc_timer_start\fP(timer); } while(0)"

.PP
Inits a given timer so that it can be used for profiling\&. It will:
.IP "\(bu" 2
Enable the timer
.IP "\(bu" 2
Set its clock to CPU clock (for maximum accuracy
.IP "\(bu" 2
Set the pre scale register using the value defined by \fBRFLPC_PROFILE_PRESCALE\fP
.IP "\(bu" 2
Start the timer 
.PP

.PP
Definition at line 47 of file profiling\&.h\&.
.SS "#define \fBRFLPC_PROFILE_PRESCALE\fP   (\fBrflpc_clock_get_system_clock\fP() / 1000000)"

.PP
This holds the value of the prescale counter that will be used for time measurement\&. Define it if you wan't to use another value\&. By default, it is set so that a counter holds microseconds 
.PP
Definition at line 37 of file profiling\&.h\&.
.SS "#define \fBRFLPC_STOP\fP(l, c)"
\fBValue:\fP
.PP
.nf
do {    \
   uint32_t leds = (l);         \
   while(1) {                   \
      rflpc_led_val(leds);      \
      RFLPC_DELAY((c));         \
      leds=~leds;               \
      }                         \
   }                            \
   while(0)
.fi
.PP
Stops execution by an infinite loop, switching between led pattern l and its opposite\&. 
.PP
Definition at line 51 of file debug\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for rfLPC from the source code\&.
